{"name": "test_017_03_details", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: MicrosoftEdge=119.0.2151.72)\nStacktrace:\n\tGetHandleVerifier [0x00007FF628482602+60402]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF628407352+253666]\n\t(No symbol) [0x00007FF6281D9AE3]\n\t(No symbol) [0x00007FF62822B4B3]\n\t(No symbol) [0x00007FF62821DCF9]\n\t(No symbol) [0x00007FF62824BA8A]\n\t(No symbol) [0x00007FF62821D766]\n\t(No symbol) [0x00007FF62821D60D]\n\t(No symbol) [0x00007FF62824BDB0]\n\t(No symbol) [0x00007FF62821D766]\n\t(No symbol) [0x00007FF628265111]\n\t(No symbol) [0x00007FF62824B863]\n\t(No symbol) [0x00007FF62821C585]\n\t(No symbol) [0x00007FF62821B993]\n\t(No symbol) [0x00007FF62821CD14]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6286634A4+1161924]\n\t(No symbol) [0x00007FF62829E5F6]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF62835B083+37459]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF628352C4D+3613]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6286621E4+1157124]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6284116A8+295480]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF62840CB74+276228]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF62840CCA2+276530]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6283FFA91+222753]\n\tBaseThreadInitThunk [0x00007FFC2DC47344+20]\n\tRtlUserThreadStart [0x00007FFC2F0C26B1+33]", "trace": "self = <testcases.test_017_fixture.Test_017_fixture_demo object at 0x000001ED7D029490>\nsetup = <selenium.webdriver.edge.webdriver.WebDriver (session=\"72ec0d562b7921cd30aebdbee9081114\")>\n\n    def test_017_03_details(self,setup):\n    \n        self.driver=setup ;\n    \n        self.driver.get(\"https://magento.softwaretestingboard.com/\");\n    \n        self.driver.find_element(By.XPATH, '(//a[contains(text(),\"Sign In \")])[1]').click();\n    \n        self.driver.find_element(By.XPATH, '//input[@name=\"login[username]\"]').send_keys('rushigadge189@gmail.com');\n    \n        self.driver.find_element(By.XPATH, '(//input[@type=\"password\"])[1]').send_keys('@#Rushi@181297');\n    \n        self.driver.find_element(By.XPATH, '(//span[text()=\"Sign In\"])[1]').click();\n    \n        self.driver.find_element(By.XPATH, '(//button[@class=\"action switch\"])[1]').click();\n    \n>       self.driver.find_element(By.XPATH, '(//a[text()=\"My Account\"])[1]').click();\n\ntestcases\\test_017_fixture.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001ED7D05E590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...3FFA91+222753]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC2DC47344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFC2F0C26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: MicrosoftEdge=119.0.2151.72)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF628482602+60402]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF628407352+253666]\nE       \t(No symbol) [0x00007FF6281D9AE3]\nE       \t(No symbol) [0x00007FF62822B4B3]\nE       \t(No symbol) [0x00007FF62821DCF9]\nE       \t(No symbol) [0x00007FF62824BA8A]\nE       \t(No symbol) [0x00007FF62821D766]\nE       \t(No symbol) [0x00007FF62821D60D]\nE       \t(No symbol) [0x00007FF62824BDB0]\nE       \t(No symbol) [0x00007FF62821D766]\nE       \t(No symbol) [0x00007FF628265111]\nE       \t(No symbol) [0x00007FF62824B863]\nE       \t(No symbol) [0x00007FF62821C585]\nE       \t(No symbol) [0x00007FF62821B993]\nE       \t(No symbol) [0x00007FF62821CD14]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6286634A4+1161924]\nE       \t(No symbol) [0x00007FF62829E5F6]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF62835B083+37459]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF628352C4D+3613]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6286621E4+1157124]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6284116A8+295480]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF62840CB74+276228]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF62840CCA2+276530]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6283FFA91+222753]\nE       \tBaseThreadInitThunk [0x00007FFC2DC47344+20]\nE       \tRtlUserThreadStart [0x00007FFC2F0C26B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "start": 1700240296391, "stop": 1700240312430, "uuid": "66505759-495e-459d-ad0f-12368d888058", "historyId": "5c48d9c436060147f0879032ce9150f7", "testCaseId": "5c48d9c436060147f0879032ce9150f7", "fullName": "testcases.test_017_fixture.Test_017_fixture_demo#test_017_03_details", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_017_fixture"}, {"name": "subSuite", "value": "Test_017_fixture_demo"}, {"name": "host", "value": "DESKTOP-U7OANNR"}, {"name": "thread", "value": "8616-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_017_fixture"}]}