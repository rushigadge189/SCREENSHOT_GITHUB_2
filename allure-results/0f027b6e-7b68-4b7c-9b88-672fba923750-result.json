{"name": "test_21_02_testlogin_config", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <testcases.test_21_02_test_config.Test_21_02_testconfig object at 0x000001F1EF700D50>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0374c087cdc2abe477c2bdf5cd7d564e\")>\n\n    def test_21_02_testlogin_config(self,setup):\n    \n        self.driver=setup ;\n    \n        self.driver.get(\"https://practicetestautomation.com/practice-test-login/\") ;\n        time.sleep(1) ;\n    \n        self.driver.find_element(By.XPATH, '//input[@id=\"username\"]').send_keys(self.UserName) ;\n        time.sleep(1) ;\n    \n        self.driver.find_element(By.XPATH, '//input[@id=\"password\"]').send_keys(self.Password) ;\n        time.sleep(1) ;\n    \n        self.driver.find_element(By.XPATH, '//button[text()=\"Submit\"]').click() ;\n        time.sleep(1) ;\n    \n        try:\n    \n>           self.driver.find_element(By.XPATH, '//a[contains(text(), \"Log out\")]') ;\n\ntestcases\\test_21_02_test_config.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F1ED043B90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF664848094]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE196F7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE19E426B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[contains(text(), \"Log out\")]\"}\nE         (Session info: chrome-headless-shell=120.0.6099.71); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6648E4D02+56194]\nE       \t(No symbol) [0x00007FF6648504B2]\nE       \t(No symbol) [0x00007FF6646F76AA]\nE       \t(No symbol) [0x00007FF6647416D0]\nE       \t(No symbol) [0x00007FF6647417EC]\nE       \t(No symbol) [0x00007FF664784D77]\nE       \t(No symbol) [0x00007FF664765EBF]\nE       \t(No symbol) [0x00007FF664782786]\nE       \t(No symbol) [0x00007FF664765C23]\nE       \t(No symbol) [0x00007FF664734A45]\nE       \t(No symbol) [0x00007FF664735AD4]\nE       \tGetHandleVerifier [0x00007FF664C5D5BB+3695675]\nE       \tGetHandleVerifier [0x00007FF664CB6197+4059159]\nE       \tGetHandleVerifier [0x00007FF664CADF63+4025827]\nE       \tGetHandleVerifier [0x00007FF66497F029+687785]\nE       \t(No symbol) [0x00007FF66485B508]\nE       \t(No symbol) [0x00007FF664857564]\nE       \t(No symbol) [0x00007FF6648576E9]\nE       \t(No symbol) [0x00007FF664848094]\nE       \tBaseThreadInitThunk [0x00007FFE196F7344+20]\nE       \tRtlUserThreadStart [0x00007FFE19E426B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_21_02_test_config.Test_21_02_testconfig object at 0x000001F1EF700D50>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0374c087cdc2abe477c2bdf5cd7d564e\")>\n\n    def test_21_02_testlogin_config(self,setup):\n    \n        self.driver=setup ;\n    \n        self.driver.get(\"https://practicetestautomation.com/practice-test-login/\") ;\n        time.sleep(1) ;\n    \n        self.driver.find_element(By.XPATH, '//input[@id=\"username\"]').send_keys(self.UserName) ;\n        time.sleep(1) ;\n    \n        self.driver.find_element(By.XPATH, '//input[@id=\"password\"]').send_keys(self.Password) ;\n        time.sleep(1) ;\n    \n        self.driver.find_element(By.XPATH, '//button[text()=\"Submit\"]').click() ;\n        time.sleep(1) ;\n    \n        try:\n    \n            self.driver.find_element(By.XPATH, '//a[contains(text(), \"Log out\")]') ;\n    \n            self.driver.save_screenshot(\"D:\\\\PYTHON CT15\\\\REVISION\\\\screenshots\\\\test_21_02_test_practice_pass.png\") ;\n    \n            print('\\n********LOGIN SUCCESSFUL********') ;\n    \n            text1=self.driver.find_element(By.XPATH, '//strong[text()=\"Congratulations student. You successfully logged in!\"]').text ;\n            print(text1) ;\n    \n            self.driver.find_element(By.XPATH, '//a[contains(text(), \"Log out\")]').click() ;\n    \n    \n            self.driver.close() ;\n            assert True ;\n    \n    \n    \n    \n        except:\n            self.driver.save_screenshot(\"D:\\\\PYTHON CT15\\\\REVISION\\\\screenshots\\\\test_21_02_test_practice_fail.png\") ;\n            print(\"\\n********LOGIN UNSUCCESSFUL********\") ;\n            self.driver.close() ;\n>           assert False ;\nE           assert False\n\ntestcases\\test_21_02_test_config.py:50: AssertionError"}, "start": 1703077206784, "stop": 1703077222979, "uuid": "7c0b4b65-3d1e-47d1-b165-ec63a590502a", "historyId": "405a2a709368d7d1b3b50b4fa4319a3e", "testCaseId": "405a2a709368d7d1b3b50b4fa4319a3e", "fullName": "testcases.test_21_02_test_config.Test_21_02_testconfig#test_21_02_testlogin_config", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_21_02_test_config"}, {"name": "subSuite", "value": "Test_21_02_testconfig"}, {"name": "host", "value": "DESKTOP-U7OANNR"}, {"name": "thread", "value": "13740-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_21_02_test_config"}]}