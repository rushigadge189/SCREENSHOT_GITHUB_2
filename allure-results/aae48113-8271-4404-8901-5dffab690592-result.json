{"name": "test_18_02_swaglab_prg", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: disconnected: Unable to receive message from renderer\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome=118.0.5993.71)\nStacktrace:\n\tGetHandleVerifier [0x00007FF76EB68EF2+54786]\n\t(No symbol) [0x00007FF76EAD5612]\n\t(No symbol) [0x00007FF76E98A64B]\n\t(No symbol) [0x00007FF76E978BEA]\n\t(No symbol) [0x00007FF76E9773AA]\n\t(No symbol) [0x00007FF76E977E6E]\n\t(No symbol) [0x00007FF76E98AB98]\n\t(No symbol) [0x00007FF76E96A470]\n\t(No symbol) [0x00007FF76E9F6314]\n\t(No symbol) [0x00007FF76E9EBE30]\n\t(No symbol) [0x00007FF76E9C0941]\n\t(No symbol) [0x00007FF76E9C1B84]\n\tGetHandleVerifier [0x00007FF76EEB7F52+3524194]\n\tGetHandleVerifier [0x00007FF76EF0D800+3874576]\n\tGetHandleVerifier [0x00007FF76EF05D7F+3843215]\n\tGetHandleVerifier [0x00007FF76EC05086+694166]\n\t(No symbol) [0x00007FF76EAE0A88]\n\t(No symbol) [0x00007FF76EADCA94]\n\t(No symbol) [0x00007FF76EADCBC2]\n\t(No symbol) [0x00007FF76EACCC83]\n\tBaseThreadInitThunk [0x00007FFC2DC47344+20]\n\tRtlUserThreadStart [0x00007FFC2F0C26B1+33]", "trace": "self = <testcases.test_18_02_swaglab.Test_18_02_swag_lab_prg object at 0x000001A0A2EC7090>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6fa41ff2ff7651eda1bbb67d35d8d1eb\")>\n\n    def test_18_02_swaglab_prg(self,setup):\n    \n        self.driver=setup ;\n    \n        obj=Test_18_02_swag_lab(self.driver) ;\n    \n        obj.test_get_url(\"https://www.saucedemo.com/\") ;\n    \n        obj.test_enter_username('standard_user') ;\n    \n        obj.test_enter_password('secret_sauce') ;\n    \n        obj.test_click_login();\n    \n        if(obj.test_status()==True):\n            self.driver.save_screenshot('D:\\\\PYTHON CT15\\\\REVISION\\\\screenshots\\\\test_18_02_swaglabs_pass.pngl') ;\n    \n        else:\n            self.driver.save_screenshot('D:\\\\PYTHON CT15\\\\REVISION\\\\screenshots\\\\test_18_02_swaglabs_fail.png') ;\n    \n        obj.test_click_hamburger_icon() ;\n    \n        obj.test_click_logout_buton() ;\n    \n>       self.driver.close() ;\n\ntestcases\\test_18_02_swaglab.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:455: in close\n    self.execute(Command.CLOSE)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A0A54F2B10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: Unable to receive message from ren...07FF76EACCC83]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC2DC47344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFC2F0C26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: Unable to receive message from renderer\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome=118.0.5993.71)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF76EB68EF2+54786]\nE       \t(No symbol) [0x00007FF76EAD5612]\nE       \t(No symbol) [0x00007FF76E98A64B]\nE       \t(No symbol) [0x00007FF76E978BEA]\nE       \t(No symbol) [0x00007FF76E9773AA]\nE       \t(No symbol) [0x00007FF76E977E6E]\nE       \t(No symbol) [0x00007FF76E98AB98]\nE       \t(No symbol) [0x00007FF76E96A470]\nE       \t(No symbol) [0x00007FF76E9F6314]\nE       \t(No symbol) [0x00007FF76E9EBE30]\nE       \t(No symbol) [0x00007FF76E9C0941]\nE       \t(No symbol) [0x00007FF76E9C1B84]\nE       \tGetHandleVerifier [0x00007FF76EEB7F52+3524194]\nE       \tGetHandleVerifier [0x00007FF76EF0D800+3874576]\nE       \tGetHandleVerifier [0x00007FF76EF05D7F+3843215]\nE       \tGetHandleVerifier [0x00007FF76EC05086+694166]\nE       \t(No symbol) [0x00007FF76EAE0A88]\nE       \t(No symbol) [0x00007FF76EADCA94]\nE       \t(No symbol) [0x00007FF76EADCBC2]\nE       \t(No symbol) [0x00007FF76EACCC83]\nE       \tBaseThreadInitThunk [0x00007FFC2DC47344+20]\nE       \tRtlUserThreadStart [0x00007FFC2F0C26B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "start": 1701279476982, "stop": 1701279486464, "uuid": "09851c1b-9c3a-4c9d-85f0-40a45c35937a", "historyId": "7c6fb88d1e28b10fb4f41c01bdca16f8", "testCaseId": "7c6fb88d1e28b10fb4f41c01bdca16f8", "fullName": "testcases.test_18_02_swaglab.Test_18_02_swag_lab_prg#test_18_02_swaglab_prg", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_18_02_swaglab"}, {"name": "subSuite", "value": "Test_18_02_swag_lab_prg"}, {"name": "host", "value": "DESKTOP-U7OANNR"}, {"name": "thread", "value": "6888-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_18_02_swaglab"}]}