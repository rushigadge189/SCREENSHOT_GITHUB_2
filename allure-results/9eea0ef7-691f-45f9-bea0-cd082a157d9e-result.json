{"name": "test_017_03_details", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of Microsoft Edge WebDriver only supports Microsoft Edge version 117\nCurrent browser version is 119.0.2151.58 with binary path C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\nStacktrace:\n\tGetHandleVerifier [0x00007FF68D8599F2+63682]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF68D7E1942+267762]\n\t(No symbol) [0x00007FF68D59AC0E]\n\t(No symbol) [0x00007FF68D5DA468]\n\t(No symbol) [0x00007FF68D5D9653]\n\t(No symbol) [0x00007FF68D5D2CD1]\n\t(No symbol) [0x00007FF68D5CDDEF]\n\t(No symbol) [0x00007FF68D61557A]\n\t(No symbol) [0x00007FF68D60C623]\n\t(No symbol) [0x00007FF68D5DDA7A]\n\t(No symbol) [0x00007FF68D5DCD6B]\n\t(No symbol) [0x00007FF68D5DE204]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF68DA25EF9+1233737]\n\t(No symbol) [0x00007FF68D65B274]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF68D7232AA+33498]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF68D71BDE9+3609]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF68DA24C94+1229028]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF68D7EBAE8+309144]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF68D7E67C4+287860]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF68D7E68F2+288162]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF68D7D9FF1+236705]\n\tBaseThreadInitThunk [0x00007FFC2DC47344+20]\n\tRtlUserThreadStart [0x00007FFC2F0C26B1+33]", "trace": "browser = 'edge'\n\n    @pytest.fixture\n    def setup(browser):\n        if(browser==\"chrome\") :\n            print(\"\\n*********RUNNING THE TEST CASE INTO CHROME BROWSER**********\") ;\n            driver=webdriver.Chrome();\n        elif(browser==\"edge\"):\n            print(\"\\n***********RUNNING THE TEST CASE IN EDGE BROWSER***********\")\n>           driver=webdriver.Edge();\n\ntestcases\\conftest.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:56: in __init__\n    super().__init__(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:205: in __init__\n    self.start_session(capabilities)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:289: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002D372738E90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Micr...7D9FF1+236705]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC2DC47344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFC2F0C26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of Microsoft Edge WebDriver only supports Microsoft Edge version 117\nE       Current browser version is 119.0.2151.58 with binary path C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF68D8599F2+63682]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF68D7E1942+267762]\nE       \t(No symbol) [0x00007FF68D59AC0E]\nE       \t(No symbol) [0x00007FF68D5DA468]\nE       \t(No symbol) [0x00007FF68D5D9653]\nE       \t(No symbol) [0x00007FF68D5D2CD1]\nE       \t(No symbol) [0x00007FF68D5CDDEF]\nE       \t(No symbol) [0x00007FF68D61557A]\nE       \t(No symbol) [0x00007FF68D60C623]\nE       \t(No symbol) [0x00007FF68D5DDA7A]\nE       \t(No symbol) [0x00007FF68D5DCD6B]\nE       \t(No symbol) [0x00007FF68D5DE204]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF68DA25EF9+1233737]\nE       \t(No symbol) [0x00007FF68D65B274]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF68D7232AA+33498]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF68D71BDE9+3609]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF68DA24C94+1229028]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF68D7EBAE8+309144]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF68D7E67C4+287860]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF68D7E68F2+288162]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF68D7D9FF1+236705]\nE       \tBaseThreadInitThunk [0x00007FFC2DC47344+20]\nE       \tRtlUserThreadStart [0x00007FFC2F0C26B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "attachments": [{"name": "log", "source": "d27ea4b5-5761-4c4c-9814-00178ab7c3af-attachment.txt", "type": "text/plain"}], "start": 1700239859924, "stop": 1700239859924, "uuid": "1028e90a-0e3c-4a7f-99dc-db8138c99863", "historyId": "5c48d9c436060147f0879032ce9150f7", "testCaseId": "5c48d9c436060147f0879032ce9150f7", "fullName": "testcases.test_017_fixture.Test_017_fixture_demo#test_017_03_details", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_017_fixture"}, {"name": "subSuite", "value": "Test_017_fixture_demo"}, {"name": "host", "value": "DESKTOP-U7OANNR"}, {"name": "thread", "value": "31172-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_017_fixture"}]}