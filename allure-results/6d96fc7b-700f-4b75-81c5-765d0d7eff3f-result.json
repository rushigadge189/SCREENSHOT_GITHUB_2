{"name": "test_19_02_swag_labs", "status": "broken", "statusDetails": {"message": "PermissionError: [Errno 13] Permission denied: 'D:\\\\PYTHON CT15\\\\REVISION\\\\testdata\\\\SWAGLABS_DDT.xlsx'", "trace": "self = <testcases.test_19_02_swaglabs_ddt.Test_19_02_swaglabs object at 0x0000028622A1A590>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d0bdcd548347b9806c59163370b3da70\")>\n\n    def test_19_02_swag_labs(self,setup):\n    \n        self.driver=setup ;\n    \n        path='D:\\\\PYTHON CT15\\\\REVISION\\\\testdata\\\\SWAGLABS_DDT.xlsx' ;\n    \n        rows=XUTils.getRowCount(path, 'SWAG_LABS');\n    \n        for r in range (2, rows+1):\n    \n            self.driver.get('https://www.saucedemo.com/') ;\n            time.sleep(1) ;\n    \n            username=XUTils.readData(path, 'SWAG_LABS', r, 1) ;\n            password=XUTils.readData(path, 'SWAG_LABS', r, 2) ;\n    \n            self.driver.find_element(By.XPATH, '//input[@id=\"user-name\"]').send_keys(username) ;\n            time.sleep(1) ;\n    \n            self.driver.find_element(By.XPATH, '//input[@id=\"password\"]').send_keys(password) ;\n            time.sleep(1) ;\n    \n            self.driver.find_element(By.XPATH, '//input[@id=\"login-button\"]').click() ;\n            time.sleep(1) ;\n    \n            try:\n                self.driver.find_element(By.XPATH, '//button[@id=\"react-burger-menu-btn\"]');\n                time.sleep(1);\n    \n                self.driver.find_element(By.XPATH, '//button[@id=\"react-burger-menu-btn\"]').click() ;\n                time.sleep(1) ;\n    \n                self.driver.find_element(By.XPATH, '//a[@id=\"logout_sidebar_link\"]').click() ;\n                time.sleep(1) ;\n    \n                print('\\n********LOGIN SUCCESSFUL*********');\n    \n>               XUTils.writeData(path, 'SWAG_LABS', r, 3, 'PASSED')\n\ntestcases\\test_19_02_swaglabs_ddt.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutilities\\XUTils.py:17: in writeData\n    workbook.save(file) ;\nvenv\\Lib\\site-packages\\openpyxl\\workbook\\workbook.py:386: in save\n    save_workbook(self, filename)\nvenv\\Lib\\site-packages\\openpyxl\\writer\\excel.py:291: in save_workbook\n    archive = ZipFile(filename, 'w', ZIP_DEFLATED, allowZip64=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <zipfile.ZipFile [closed]>, file = 'D:\\\\PYTHON CT15\\\\REVISION\\\\testdata\\\\SWAGLABS_DDT.xlsx', mode = 'w', compression = 8\nallowZip64 = True, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n        self.metadata_encoding = metadata_encoding\n    \n        # Check that we don't try to write with nonconforming codecs\n        if self.metadata_encoding and mode != 'r':\n            raise ValueError(\n                \"metadata_encoding is only supported for reading files\")\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   PermissionError: [Errno 13] Permission denied: 'D:\\\\PYTHON CT15\\\\REVISION\\\\testdata\\\\SWAGLABS_DDT.xlsx'\n\nC:\\Users\\RUSHIKESH\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\zipfile.py:1284: PermissionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_19_02_swaglabs_ddt.Test_19_02_swaglabs object at 0x0000028622A1A590>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d0bdcd548347b9806c59163370b3da70\")>\n\n    def test_19_02_swag_labs(self,setup):\n    \n        self.driver=setup ;\n    \n        path='D:\\\\PYTHON CT15\\\\REVISION\\\\testdata\\\\SWAGLABS_DDT.xlsx' ;\n    \n        rows=XUTils.getRowCount(path, 'SWAG_LABS');\n    \n        for r in range (2, rows+1):\n    \n            self.driver.get('https://www.saucedemo.com/') ;\n            time.sleep(1) ;\n    \n            username=XUTils.readData(path, 'SWAG_LABS', r, 1) ;\n            password=XUTils.readData(path, 'SWAG_LABS', r, 2) ;\n    \n            self.driver.find_element(By.XPATH, '//input[@id=\"user-name\"]').send_keys(username) ;\n            time.sleep(1) ;\n    \n            self.driver.find_element(By.XPATH, '//input[@id=\"password\"]').send_keys(password) ;\n            time.sleep(1) ;\n    \n            self.driver.find_element(By.XPATH, '//input[@id=\"login-button\"]').click() ;\n            time.sleep(1) ;\n    \n            try:\n                self.driver.find_element(By.XPATH, '//button[@id=\"react-burger-menu-btn\"]');\n                time.sleep(1);\n    \n                self.driver.find_element(By.XPATH, '//button[@id=\"react-burger-menu-btn\"]').click() ;\n                time.sleep(1) ;\n    \n                self.driver.find_element(By.XPATH, '//a[@id=\"logout_sidebar_link\"]').click() ;\n                time.sleep(1) ;\n    \n                print('\\n********LOGIN SUCCESSFUL*********');\n    \n                XUTils.writeData(path, 'SWAG_LABS', r, 3, 'PASSED')\n    \n            except :\n                print('\\n********LOGIN UNSUCCESSFUL*******') ;\n>               XUTils.writeData(path, 'SWAG_LABS', r, 3, 'FAILED') ;\n\ntestcases\\test_19_02_swaglabs_ddt.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutilities\\XUTils.py:17: in writeData\n    workbook.save(file) ;\nvenv\\Lib\\site-packages\\openpyxl\\workbook\\workbook.py:386: in save\n    save_workbook(self, filename)\nvenv\\Lib\\site-packages\\openpyxl\\writer\\excel.py:291: in save_workbook\n    archive = ZipFile(filename, 'w', ZIP_DEFLATED, allowZip64=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <zipfile.ZipFile [closed]>, file = 'D:\\\\PYTHON CT15\\\\REVISION\\\\testdata\\\\SWAGLABS_DDT.xlsx', mode = 'w', compression = 8\nallowZip64 = True, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n        self.metadata_encoding = metadata_encoding\n    \n        # Check that we don't try to write with nonconforming codecs\n        if self.metadata_encoding and mode != 'r':\n            raise ValueError(\n                \"metadata_encoding is only supported for reading files\")\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   PermissionError: [Errno 13] Permission denied: 'D:\\\\PYTHON CT15\\\\REVISION\\\\testdata\\\\SWAGLABS_DDT.xlsx'\n\nC:\\Users\\RUSHIKESH\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\zipfile.py:1284: PermissionError"}, "start": 1701882538193, "stop": 1701882546782, "uuid": "d0dbd1a3-dba8-41d7-926b-c012da2f533b", "historyId": "8068627670c9bc07017877b322d84438", "testCaseId": "8068627670c9bc07017877b322d84438", "fullName": "testcases.test_19_02_swaglabs_ddt.Test_19_02_swaglabs#test_19_02_swag_labs", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_19_02_swaglabs_ddt"}, {"name": "subSuite", "value": "Test_19_02_swaglabs"}, {"name": "host", "value": "DESKTOP-U7OANNR"}, {"name": "thread", "value": "30800-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_19_02_swaglabs_ddt"}]}