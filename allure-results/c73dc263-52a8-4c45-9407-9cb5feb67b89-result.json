{"name": "test_19_02_swag_labs", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=118.0.5993.71)\nStacktrace:\n\tGetHandleVerifier [0x00007FF789BD8EF2+54786]\n\t(No symbol) [0x00007FF789B45612]\n\t(No symbol) [0x00007FF7899FA64B]\n\t(No symbol) [0x00007FF7899DA9F5]\n\t(No symbol) [0x00007FF789A60887]\n\t(No symbol) [0x00007FF789A743CF]\n\t(No symbol) [0x00007FF789A5BC43]\n\t(No symbol) [0x00007FF789A30941]\n\t(No symbol) [0x00007FF789A31B84]\n\tGetHandleVerifier [0x00007FF789F27F52+3524194]\n\tGetHandleVerifier [0x00007FF789F7D800+3874576]\n\tGetHandleVerifier [0x00007FF789F75D7F+3843215]\n\tGetHandleVerifier [0x00007FF789C75086+694166]\n\t(No symbol) [0x00007FF789B50A88]\n\t(No symbol) [0x00007FF789B4CA94]\n\t(No symbol) [0x00007FF789B4CBC2]\n\t(No symbol) [0x00007FF789B3CC83]\n\tBaseThreadInitThunk [0x00007FFC2DC47344+20]\n\tRtlUserThreadStart [0x00007FFC2F0C26B1+33]", "trace": "self = <testcases.test_19_02_swaglabs_ddt.Test_19_02_swaglabs object at 0x000001CB38B27190>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"68753fad0fbecbfde98cfb6b4226b45a\")>\n\n    def test_19_02_swag_labs(self,setup):\n    \n        self.driver=setup ;\n    \n        path='D:\\\\PYTHON CT15\\\\REVISION\\\\testdata\\\\SWAGLABS_DDT.xlsx' ;\n    \n        rows=XUTils.getRowCount(path, 'SWAG_LABS');\n    \n        for r in range (2, rows+1):\n    \n>           self.driver.get('https://www.saucedemo.com/') ;\n\ntestcases\\test_19_02_swaglabs_ddt.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:353: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001CB388A1710>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF789B3CC83]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC2DC47344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFC2F0C26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=118.0.5993.71)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF789BD8EF2+54786]\nE       \t(No symbol) [0x00007FF789B45612]\nE       \t(No symbol) [0x00007FF7899FA64B]\nE       \t(No symbol) [0x00007FF7899DA9F5]\nE       \t(No symbol) [0x00007FF789A60887]\nE       \t(No symbol) [0x00007FF789A743CF]\nE       \t(No symbol) [0x00007FF789A5BC43]\nE       \t(No symbol) [0x00007FF789A30941]\nE       \t(No symbol) [0x00007FF789A31B84]\nE       \tGetHandleVerifier [0x00007FF789F27F52+3524194]\nE       \tGetHandleVerifier [0x00007FF789F7D800+3874576]\nE       \tGetHandleVerifier [0x00007FF789F75D7F+3843215]\nE       \tGetHandleVerifier [0x00007FF789C75086+694166]\nE       \t(No symbol) [0x00007FF789B50A88]\nE       \t(No symbol) [0x00007FF789B4CA94]\nE       \t(No symbol) [0x00007FF789B4CBC2]\nE       \t(No symbol) [0x00007FF789B3CC83]\nE       \tBaseThreadInitThunk [0x00007FFC2DC47344+20]\nE       \tRtlUserThreadStart [0x00007FFC2F0C26B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "start": 1701882564316, "stop": 1701882577332, "uuid": "77382f58-c6b6-45c7-87b4-a7eb431afc46", "historyId": "8068627670c9bc07017877b322d84438", "testCaseId": "8068627670c9bc07017877b322d84438", "fullName": "testcases.test_19_02_swaglabs_ddt.Test_19_02_swaglabs#test_19_02_swag_labs", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_19_02_swaglabs_ddt"}, {"name": "subSuite", "value": "Test_19_02_swaglabs"}, {"name": "host", "value": "DESKTOP-U7OANNR"}, {"name": "thread", "value": "40284-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_19_02_swaglabs_ddt"}]}