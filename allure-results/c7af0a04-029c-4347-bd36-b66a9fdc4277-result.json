{"name": "test_20_oange_hrm_logs", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=120.0.6099.71)\nStacktrace:\n\tGetHandleVerifier [0x00007FF62EBC4D02+56194]\n\t(No symbol) [0x00007FF62EB304B2]\n\t(No symbol) [0x00007FF62E9D76AA]\n\t(No symbol) [0x00007FF62E9B0AFD]\n\t(No symbol) [0x00007FF62EA4C9AB]\n\t(No symbol) [0x00007FF62EA6201F]\n\t(No symbol) [0x00007FF62EA45C23]\n\t(No symbol) [0x00007FF62EA14A45]\n\t(No symbol) [0x00007FF62EA15AD4]\n\tGetHandleVerifier [0x00007FF62EF3D5BB+3695675]\n\tGetHandleVerifier [0x00007FF62EF96197+4059159]\n\tGetHandleVerifier [0x00007FF62EF8DF63+4025827]\n\tGetHandleVerifier [0x00007FF62EC5F029+687785]\n\t(No symbol) [0x00007FF62EB3B508]\n\t(No symbol) [0x00007FF62EB37564]\n\t(No symbol) [0x00007FF62EB376E9]\n\t(No symbol) [0x00007FF62EB28094]\n\tBaseThreadInitThunk [0x00007FFE196F7344+20]\n\tRtlUserThreadStart [0x00007FFE19E426B1+33]", "trace": "self = <testcases.test_20_orangehrnm_logs.Test_20_log_orange_hrm object at 0x000001F71C2F5A90>\n\n    def test_20_oange_hrm_logs(self):\n    \n        self.log.info(\"TEST CASE IS STARTED\") ;\n    \n        self.log.info(\"OPEN THE BROWSER\") ;\n        driver=webdriver.Chrome() ;\n    \n        self.log.info(\"MAXIMIZE THE WINDOW\") ;\n        driver.maximize_window() ;\n    \n        self.log.info(\"IMPLICIT WAIT\")\n        driver.implicitly_wait(5) ;\n    \n        self.log.info(\"NAVIGATE TO THE ORL\") ;\n        driver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\") ;\n    \n        self.log.info(\"ENTER THE URL\") ;\n        driver.find_element(By.XPATH, '//input[@placeholder=\"Username\"]').send_keys('Admin') ;\n    \n        self.log.info(\"ENTER THE PASSWORD\") ;\n        driver.find_element(By.XPATH, '//input[@placeholder=\"Password\"]').send_keys('admin123') ;\n    \n        self.log.info(\"CLICK ON THE LOGIN BUTTON\") ;\n        driver.find_element(By.XPATH, '//button[text()=\" Login \"]').click() ;\n    \n        try:\n            self.log.info(\"LOOKING FOR AN ELEMENT/PAGE TITLE\") ;\n            driver.find_element(By.XPATH, \"//i[@class='oxd-icon bi-caret-down-fill oxd-userdropdown-icon']\") ;\n    \n            logging.info(\"TAKING THE SCREENSHOT\") ;\n            driver.save_screenshot(\"D:\\\\PYTHON CT15\\\\REVISION\\\\screenshots\\\\test_20_orangehrm_log_pass.png\") ;\n    \n            self.log.info(\"PRINTING STATEMENT\") ;\n            print(\"\\n*******LOGIN SUCCESSFUL*******\") ;\n    \n            self.log.info(\"PROCEED FOR LOGOUT\") ;\n            driver.find_element(By.XPATH, \"//i[@class='oxd-icon bi-caret-down-fill oxd-userdropdown-icon']\").click();\n            time.sleep(1) ;\n    \n            driver.find_element(By.XPATH, '//a[text()=\"Logout\"]' ) ;\n            time.sleep(1) ;\n    \n            self.log.info(\"CLOSE THE BROWSER\") ;\n>           driver.close() ;\n\ntestcases\\test_20_orangehrnm_logs.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:455: in close\n    self.execute(Command.CLOSE)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F71DE3F790>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF62EB28094]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE196F7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE19E426B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=120.0.6099.71)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF62EBC4D02+56194]\nE       \t(No symbol) [0x00007FF62EB304B2]\nE       \t(No symbol) [0x00007FF62E9D76AA]\nE       \t(No symbol) [0x00007FF62E9B0AFD]\nE       \t(No symbol) [0x00007FF62EA4C9AB]\nE       \t(No symbol) [0x00007FF62EA52DA6]\nE       \t(No symbol) [0x00007FF62EA45E40]\nE       \t(No symbol) [0x00007FF62EA14A45]\nE       \t(No symbol) [0x00007FF62EA15AD4]\nE       \tGetHandleVerifier [0x00007FF62EF3D5BB+3695675]\nE       \tGetHandleVerifier [0x00007FF62EF96197+4059159]\nE       \tGetHandleVerifier [0x00007FF62EF8DF63+4025827]\nE       \tGetHandleVerifier [0x00007FF62EC5F029+687785]\nE       \t(No symbol) [0x00007FF62EB3B508]\nE       \t(No symbol) [0x00007FF62EB37564]\nE       \t(No symbol) [0x00007FF62EB376E9]\nE       \t(No symbol) [0x00007FF62EB28094]\nE       \tBaseThreadInitThunk [0x00007FFE196F7344+20]\nE       \tRtlUserThreadStart [0x00007FFE19E426B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_20_orangehrnm_logs.Test_20_log_orange_hrm object at 0x000001F71C2F5A90>\n\n    def test_20_oange_hrm_logs(self):\n    \n        self.log.info(\"TEST CASE IS STARTED\") ;\n    \n        self.log.info(\"OPEN THE BROWSER\") ;\n        driver=webdriver.Chrome() ;\n    \n        self.log.info(\"MAXIMIZE THE WINDOW\") ;\n        driver.maximize_window() ;\n    \n        self.log.info(\"IMPLICIT WAIT\")\n        driver.implicitly_wait(5) ;\n    \n        self.log.info(\"NAVIGATE TO THE ORL\") ;\n        driver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\") ;\n    \n        self.log.info(\"ENTER THE URL\") ;\n        driver.find_element(By.XPATH, '//input[@placeholder=\"Username\"]').send_keys('Admin') ;\n    \n        self.log.info(\"ENTER THE PASSWORD\") ;\n        driver.find_element(By.XPATH, '//input[@placeholder=\"Password\"]').send_keys('admin123') ;\n    \n        self.log.info(\"CLICK ON THE LOGIN BUTTON\") ;\n        driver.find_element(By.XPATH, '//button[text()=\" Login \"]').click() ;\n    \n        try:\n            self.log.info(\"LOOKING FOR AN ELEMENT/PAGE TITLE\") ;\n            driver.find_element(By.XPATH, \"//i[@class='oxd-icon bi-caret-down-fill oxd-userdropdown-icon']\") ;\n    \n            logging.info(\"TAKING THE SCREENSHOT\") ;\n            driver.save_screenshot(\"D:\\\\PYTHON CT15\\\\REVISION\\\\screenshots\\\\test_20_orangehrm_log_pass.png\") ;\n    \n            self.log.info(\"PRINTING STATEMENT\") ;\n            print(\"\\n*******LOGIN SUCCESSFUL*******\") ;\n    \n            self.log.info(\"PROCEED FOR LOGOUT\") ;\n            driver.find_element(By.XPATH, \"//i[@class='oxd-icon bi-caret-down-fill oxd-userdropdown-icon']\").click();\n            time.sleep(1) ;\n    \n            driver.find_element(By.XPATH, '//a[text()=\"Logout\"]' ) ;\n            time.sleep(1) ;\n    \n            self.log.info(\"CLOSE THE BROWSER\") ;\n            driver.close() ;\n    \n            assert True ;\n    \n        except:\n>           driver.save_screenshot(\"D:\\\\PYTHON CT15\\\\REVISION\\\\screenshots\\\\test_20_orangehrm_log_pass.png\");\n\ntestcases\\test_20_orangehrnm_logs.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:825: in save_screenshot\n    return self.get_screenshot_as_file(filename)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:801: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:835: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:846: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F71DE3F790>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF62EB28094]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE196F7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE19E426B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=120.0.6099.71)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF62EBC4D02+56194]\nE       \t(No symbol) [0x00007FF62EB304B2]\nE       \t(No symbol) [0x00007FF62E9D76AA]\nE       \t(No symbol) [0x00007FF62E9B0AFD]\nE       \t(No symbol) [0x00007FF62EA4C9AB]\nE       \t(No symbol) [0x00007FF62EA6201F]\nE       \t(No symbol) [0x00007FF62EA45C23]\nE       \t(No symbol) [0x00007FF62EA14A45]\nE       \t(No symbol) [0x00007FF62EA15AD4]\nE       \tGetHandleVerifier [0x00007FF62EF3D5BB+3695675]\nE       \tGetHandleVerifier [0x00007FF62EF96197+4059159]\nE       \tGetHandleVerifier [0x00007FF62EF8DF63+4025827]\nE       \tGetHandleVerifier [0x00007FF62EC5F029+687785]\nE       \t(No symbol) [0x00007FF62EB3B508]\nE       \t(No symbol) [0x00007FF62EB37564]\nE       \t(No symbol) [0x00007FF62EB376E9]\nE       \t(No symbol) [0x00007FF62EB28094]\nE       \tBaseThreadInitThunk [0x00007FFE196F7344+20]\nE       \tRtlUserThreadStart [0x00007FFE19E426B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "7ccdb47f-77de-4bda-96db-da52ef09320d-attachment.txt", "type": "text/plain"}], "start": 1702651622414, "stop": 1702651636192, "uuid": "df6f38bf-4011-429e-8482-454de7e53ed4", "historyId": "529e56629bf96bb4ed8ff324472022b0", "testCaseId": "529e56629bf96bb4ed8ff324472022b0", "fullName": "testcases.test_20_orangehrnm_logs.Test_20_log_orange_hrm#test_20_oange_hrm_logs", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_20_orangehrnm_logs"}, {"name": "subSuite", "value": "Test_20_log_orange_hrm"}, {"name": "host", "value": "DESKTOP-U7OANNR"}, {"name": "thread", "value": "13192-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_20_orangehrnm_logs"}]}